(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var PARTICLE_RADIUS = 3;
var LINE_WIDTH = 2;
var shouldClear = true;
var toggleClear = function () { return shouldClear = !shouldClear; };
exports.toggleClear = toggleClear;
/** Clears the given canvas and draws on it the contents of the given plane. */
function draw(plane, canvas) {
    var ctx = canvas.getContext("2d");
    if (ctx) {
        if (shouldClear) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        for (var _i = 0, _a = plane.particles; _i < _a.length; _i++) {
            var particle = _a[_i];
            drawParticle(particle, ctx);
        }
        for (var _b = 0, _c = plane.walls; _b < _c.length; _b++) {
            var wall = _c[_b];
            drawWall(wall, ctx);
        }
    }
}
exports.draw = draw;
/* Draws the given particle */
function drawParticle(particle, ctx) {
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.arc(particle.pos.x, particle.pos.y, PARTICLE_RADIUS, 0, 360);
    if (particle.col)
        ctx.fillStyle = particle.col;
    ctx.fill();
}
/* Drags the given line */
function drawWall(wall, ctx) {
    ctx.beginPath();
    ctx.lineWidth = LINE_WIDTH;
    ctx.moveTo(wall.start.x, wall.start.y);
    ctx.lineTo(wall.end.x, wall.end.y);
    ctx.stroke();
}
},{}],2:[function(require,module,exports){
"use strict";
var physics = require('./physics');
var draw = require('./draw');
var plane_1 = require('./plane');
var util = require('./util');
var MIN_MS_BETWEEN_UPDATES = 20; // ~50 FPS
/* Starts the main loop */
function animate(canvas, plane) {
    var lastUpdateTime;
    // Handles all animation frames after the first
    function update(timestamp) {
        requestAnimationFrame(update);
        if (timestamp < lastUpdateTime + MIN_MS_BETWEEN_UPDATES) {
            return;
        }
        physics.advanceTime(plane, (timestamp - lastUpdateTime) / 1000);
        draw.draw(plane, canvas);
        lastUpdateTime = timestamp;
    }
    // Perform initial setup then set animation running.
    requestAnimationFrame(function (timestamp) {
        lastUpdateTime = timestamp;
        requestAnimationFrame(update);
    });
}
;
/* Creates initial objects and starts the main loop */
function start() {
    var plane = new plane_1.default({ x: 0, y: 30 });
    var canvas = document.getElementById('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    attachDragHandler(canvas, plane);
    attachTrailsHandler();
    //addParticles(plane,canvas,5);
    addWalls(plane, canvas);
    animate(canvas, plane);
}
/* Adds 'num' random particles to the plane */
function addParticles(plane, canvas, num) {
    for (var i = 0; i < num; i++) {
        var pos = { x: canvas.width / 2, y: canvas.height / 2 };
        var vel = util.getRandomVel(canvas);
        plane.addParticle(pos, vel);
    }
}
/* Adds walls around the canvas edge */
function addWalls(plane, canvas) {
    var p1 = { x: 10, y: 10 };
    var p2 = { x: 10, y: canvas.height - 10 };
    var p3 = { x: canvas.width - 10, y: canvas.height - 10 };
    var p4 = { x: canvas.width - 10, y: 10 };
    plane.addWall(p1, p2);
    plane.addWall(p2, p3);
    plane.addWall(p3, p4);
    plane.addWall(p4, p1);
}
/* Attaches events to the canvas to faciliate new particle creation. */
function attachDragHandler(canvas, plane) {
    var startPos;
    canvas.onmousedown = function (evt) {
        startPos = util.getCursorPos(canvas, evt);
    };
    canvas.onmouseup = function (evt) {
        if (startPos != null) {
            var pos = util.getCursorPos(canvas, evt);
            if (evt.altKey) {
                plane.addWall(startPos, pos);
            }
            else if (evt.ctrlKey) {
                var vel = { x: pos.x - startPos.x, y: pos.y - startPos.y };
                plane.gravity = vel;
            }
            else {
                var vel = { x: pos.x - startPos.x, y: pos.y - startPos.y };
                plane.addParticle(pos, vel);
            }
            startPos = null;
        }
    };
}
/* Spacebar turns trails on/off for particles */
function attachTrailsHandler() {
    var SPACE_BAR = 32;
    document.onkeypress = function (e) {
        console.log("test", e);
        if (e.charCode == SPACE_BAR) {
            draw.toggleClear();
        }
    };
}
//
start();
},{"./draw":1,"./physics":3,"./plane":4,"./util":5}],3:[function(require,module,exports){
"use strict";
var PARTICLE_ELASTICITY = 0.9;
/* Advances time on the plane by the given number of seconds, applying
 * velocity and gravity. */
function advanceTime(plane, seconds) {
    for (var _i = 0, _a = plane.particles; _i < _a.length; _i++) {
        var particle = _a[_i];
        moveParticle(particle, plane, seconds);
    }
    return plane;
}
exports.advanceTime = advanceTime;
/* Moves the given particle, bouncing if the particle hits a wall. */
function moveParticle(particle, plane, seconds) {
    particle.vel.x += plane.gravity.x * seconds;
    particle.vel.y += plane.gravity.y * seconds;
    var desiredMove = {
        x: particle.pos.x + particle.vel.x * seconds,
        y: particle.pos.y + particle.vel.y * seconds
    };
    for (var _i = 0, _a = plane.walls; _i < _a.length; _i++) {
        var wall = _a[_i];
        var intersect = doLineSegmentsIntersect(particle.pos, desiredMove, wall.start, wall.end);
        if (intersect) {
            var wallLine = pointsToLine2d(wall.start, wall.end);
            // make wallLine pass through origin, so that we can reflect velocity
            // vector over it
            wallLine.c = 0;
            particle.vel = reflect(particle.vel, wallLine);
            particle.vel.x *= PARTICLE_ELASTICITY;
            particle.vel.y *= PARTICLE_ELASTICITY;
            return;
        }
    }
    particle.pos = desiredMove;
}
/* Reflects the given point across the line */
function reflect(p, line) {
    var normal = {
        a: -line.b,
        b: line.a,
        c: (-line.b * p.x) + (line.a * p.y)
    };
    var intersect = doLinesIntersect(line, normal);
    var reflectedPoint = {
        x: 2 * intersect.x - p.x,
        y: 2 * intersect.y - p.y
    };
    return reflectedPoint;
}
/* Determines whether two line segments p and q intersect. If they do, returns
 * the intersection point. */
function doLineSegmentsIntersect(p1, p2, q1, q2) {
    var pLine = pointsToLine2d(p1, p2);
    var qLine = pointsToLine2d(q1, q2);
    // If lines are parallel, no intersection
    var intersect = doLinesIntersect(pLine, qLine);
    if (!intersect)
        return null;
    var p1Hit = isPointOnSegment(intersect, p1, p2);
    var p2Hit = isPointOnSegment(intersect, q1, q2);
    if (p1Hit && p2Hit) {
        return intersect;
    }
    return null;
}
/* Determines whether the given point is on the given line segment. The point is
 * assumed to lie on the line defined by the segment. */
function isPointOnSegment(p, s1, s2) {
    var epsilon = 0.01;
    var xHit = (Math.min(s1.x, s2.x) - epsilon <= p.x) &&
        (Math.max(s1.x, s2.x) + epsilon >= p.x);
    var yHit = (Math.min(s1.y, s2.y) - epsilon <= p.y) &&
        (Math.max(s1.y, s2.y) + epsilon >= p.y);
    return xHit && yHit;
}
/** Determines whether two lines p and q intersect. If they do, returns
  * the intersection point. */
function doLinesIntersect(p, q) {
    var det = (p.a * q.b) - (q.a * p.b);
    if (det == 0) {
        return null;
    }
    else {
        return {
            x: (q.b * p.c - p.b * q.c) / det,
            y: (p.a * q.c - q.a * p.c) / det
        };
    }
}
/* Converts the given points to a Line2d that runs through both points. */
function pointsToLine2d(p1, p2) {
    return {
        a: p2.y - p1.y,
        b: p1.x - p2.x,
        c: ((p2.y - p1.y) * p1.x) + ((p1.x - p2.x) * p1.y)
    };
}
},{}],4:[function(require,module,exports){
"use strict";
function randomRgbString(letters) {
    if (letters === void 0) { letters = '0123456789ABCDEF'; }
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * letters.length)];
    }
    return color;
}
/* Provides a simple Plane implementation. */
var Plane = (function () {
    function Plane(gravity) {
        this.particles = [];
        this.walls = [];
        this.gravity = gravity;
    }
    Plane.prototype.addParticle = function (pos, vel) {
        // random dark color
        var col = randomRgbString('123456788');
        this.particles.push({ pos: pos, vel: vel, col: col });
    };
    Plane.prototype.addWall = function (start, end) {
        this.walls.push({ start: start, end: end });
    };
    return Plane;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Plane;
},{}],5:[function(require,module,exports){
"use strict";
/* Fetches coordinates on canvas from mouse click */
function getCursorPos(canvas, event) {
    var rect = canvas.getBoundingClientRect();
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    return { x: x, y: y };
}
exports.getCursorPos = getCursorPos;
/* Returns a random velocity between 1% - 5% of the size of the canvas */
function getRandomVel(canvas) {
    var w = canvas.width;
    var h = canvas.height;
    var x = (w * 0.01) + (w * 0.04 * Math.random());
    var y = (h * 0.01) + (h * 0.04 * Math.random());
    return { x: x, y: y };
}
exports.getRandomVel = getRandomVel;
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
