(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var PARTICLE_RADIUS = 3;
var LINE_WIDTH = 2;
/** Clears the given canvas and draws on it the contents of the given plane. */
function draw(plane, canvas) {
    var ctx = canvas.getContext("2d");
    if (ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (var _i = 0, _a = plane.particles; _i < _a.length; _i++) {
            var particle = _a[_i];
            drawParticle(particle, ctx);
        }
        for (var _b = 0, _c = plane.lines; _b < _c.length; _b++) {
            var line = _c[_b];
            drawLine(line, ctx);
        }
    }
}
exports.draw = draw;
/* Draws the given particle */
function drawParticle(particle, ctx) {
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.arc(particle.pos.x, particle.pos.y, PARTICLE_RADIUS, 0, 360);
    ctx.fill();
}
/* Drags the given line */
function drawLine(line, ctx) {
    ctx.beginPath();
    ctx.lineWidth = LINE_WIDTH;
    ctx.moveTo(line.start.x, line.start.y);
    ctx.lineTo(line.end.x, line.end.y);
    ctx.stroke();
}
},{}],2:[function(require,module,exports){
"use strict";
var physics = require('./physics');
var draw = require('./draw');
var plane_1 = require('./plane');
var util = require('./util');
var MIN_MS_BETWEEN_UPDATES = 20; // ~50 FPS
/* Starts the main loop */
function animate(canvas, plane) {
    var lastUpdateTime;
    // Handles all animation frames after the first
    function update(timestamp) {
        requestAnimationFrame(update);
        if (timestamp < lastUpdateTime + MIN_MS_BETWEEN_UPDATES) {
            return;
        }
        physics.advanceTime(plane, (timestamp - lastUpdateTime) / 1000);
        draw.draw(plane, canvas);
        lastUpdateTime = timestamp;
    }
    // Perform initial setup then set animation running.
    requestAnimationFrame(function (timestamp) {
        lastUpdateTime = timestamp;
        requestAnimationFrame(update);
    });
}
;
/* Creates initial objects and starts the main loop */
function start() {
    var plane = new plane_1.default({ x: 0, y: 30 });
    var canvas = document.getElementById('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    attachDragHandler(canvas, plane);
    addParticles(plane, canvas, 10);
    animate(canvas, plane);
}
/* Adds 'num' random particles to the plane */
function addParticles(plane, canvas, num) {
    for (var i = 0; i < num; i++) {
        var pos = { x: canvas.width / 2, y: canvas.height / 2 };
        var vel = util.getRandomVel(canvas);
        plane.addParticle(pos, vel);
    }
}
/* Attaches events to the canvas to faciliate new particle creation. */
function attachDragHandler(canvas, plane) {
    var startPos;
    canvas.onmousedown = function (evt) {
        startPos = util.getCursorPos(canvas, evt);
    };
    canvas.onmouseup = function (evt) {
        if (startPos != null) {
            var pos = util.getCursorPos(canvas, evt);
            var vel = { x: pos.x - startPos.x, y: pos.y - startPos.y };
            plane.addParticle(pos, vel);
            startPos = null;
        }
    };
}
//
start();
},{"./draw":1,"./physics":3,"./plane":4,"./util":5}],3:[function(require,module,exports){
"use strict";
/* Advances time on the plane by the given number of seconds, applying
 * velocity and gravity. */
function advanceTime(plane, seconds) {
    var particles = plane.particles;
    var lines = plane.lines;
    for (var _i = 0, particles_1 = particles; _i < particles_1.length; _i++) {
        var particle = particles_1[_i];
        particle.vel.x += plane.gravity.x * seconds;
        particle.vel.y += plane.gravity.y * seconds;
        particle.pos.x += particle.vel.x * seconds;
        particle.pos.y += particle.vel.y * seconds;
    }
    return plane;
}
exports.advanceTime = advanceTime;
},{}],4:[function(require,module,exports){
"use strict";
/* Provides a simple Plane implementation. */
var Plane = (function () {
    function Plane(gravity) {
        this.particles = [];
        this.lines = [];
        this.gravity = gravity;
    }
    Plane.prototype.addParticle = function (pos, vel) {
        this.particles.push({ pos: pos, vel: vel });
    };
    Plane.prototype.addLine = function (start, end) {
        this.lines.push({ start: start, end: end });
    };
    return Plane;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Plane;
},{}],5:[function(require,module,exports){
"use strict";
/* Fetches coordinates on canvas from mouse click */
function getCursorPos(canvas, event) {
    var rect = canvas.getBoundingClientRect();
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    return { x: x, y: y };
}
exports.getCursorPos = getCursorPos;
/* Returns a random velocity between 1% - 5% of the size of the canvas */
function getRandomVel(canvas) {
    var w = canvas.width;
    var h = canvas.height;
    var x = (w * 0.01) + (w * 0.04 * Math.random());
    var y = (h * 0.01) + (h * 0.04 * Math.random());
    return { x: x, y: y };
}
exports.getRandomVel = getRandomVel;
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
